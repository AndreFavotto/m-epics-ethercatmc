record(mbbi,  "$(P)$(R)PTPState") {
    field(DESC, "PTP state EtherCAT bus")
    field(DTYP, "asynInt32")
    field(INP,  "@asyn($(MOTOR_PORT),0)PTPState")
    field(SCAN, "1 second")
    field(ZRVL, "0")
    field(ONVL, "1")
    field(TWVL, "2")
    field(THVL, "3")
    field(FRVL, "4")
    field(FVVL, "5")
    field(SXVL, "6")
    field(SVVL, "7")
    field(EIVL, "8")
    field(NIVL, "9")
    field(FFVL, "4294967294")

    field(ZRST, "PTP:NO_OPERATION")
    field(ONST, "PTP:INITIALIZING")
    field(TWST, "PTP:FAULTY")
    field(THST, "PTP:DISABLED")
    field(FRST, "PTP:LISTENING")
    field(FVST, "PTP:PRE_MASTER")
    field(SXST, "PTP:MASTER")
    field(SVST, "PTP:PASSIVE")
    field(EIST, "PTP:UNCALIBRATED")
    field(NIST, "PTP:SLAVE")

    field(FFST, "PTP:NO_CABLE")

    field(ZRSV, "2")
    field(ONSV, "1")
    field(TWSV, "2")
    field(THSV, "2")
    field(FRSV, "1")
    field(FVSV, "1")
    field(SXSV, "2")
    field(SVSV, "2")
    field(EISV, "2")
    field(NISV, "0")
    field(FFSV, "2")
}

record(longin, "$(P)$(R)PTPOffset")
{
    field(DTYP, "asynInt32")
    field(DESC, "PTPOffset")
    field(EGU,  "ns")
    field(INP,  "@asyn($(MOTOR_PORT),0)PTPOffset")
    field(SCAN, "1 second")
}

record(longin, "$(P)$(R)PTPSyncSeqNum")
{
    field(DTYP, "asynInt32")
    field(DESC, "PTPSyncSeqNum")
    field(EGU,  "num")
    field(INP,  "@asyn($(MOTOR_PORT),0)PTPSyncSeqNum")
    field(SCAN, "1 second")
}

record(int64in, "$(P)$(R)DcToExtTimeOffset")
{
    field(DTYP, "asynInt64")
    field(DESC, "DcToExtTimeOffsetSystem")
    field(EGU,  "ns")
    field(INP,  "@asyn($(MOTOR_PORT),0)DcToExtTimeOffset")
    field(SCAN, "1 second")
}

record(int64in, "$(P)$(R)SystemUTCtime")
{
    field(DTYP, "asynInt64")
    field(DESC, "SystemUTCtime")
    field(EGU,  "ns")
    field(INP,  "@asyn($(MOTOR_PORT),0)SystemUTCtime")
    field(SCAN, "1 second")
}

record(int64in, "$(P)$(R)SystemUTCtime-TSE")
{
    field(DTYP, "asynInt64")
    field(DESC, "SystemUTCtime")
    field(EGU,  "ns")
    field(INP,  "@asyn($(MOTOR_PORT),0)SystemUTCtime")
    field(SCAN, "I/O Intr")
    field(TSE, -2)
}

record(longin, "$(P)$(R)PTPErrorStatus")
{
    field(DTYP, "asynInt32")
    field(DESC, "PTPErrorStatus")
    field(EGU,  "ErrorStatusBits")
    field(HIGH, "1")
    field(LOW, "-1")
    field(HSV,  "1")
    field(LSV,  "1")
    field(INP,  "@asyn($(MOTOR_PORT),0)PTPErrorStatus")
    field(SCAN, "I/O Intr")
}

#
# Diff between NTP (IOC) and PTP (MCU/PLC)
# Typically the MCU has an EL6688 with PTP
# Since the PLC cycle time is 10msec,
# we allow 10msec larger values for HIGH/HIHI
record(ai, "$(P)$(R)PTPdiffTimeIOC_MCU")
{
    field(DTYP, "asynFloat64")
    field(DESC, "Diff between IOC time and MCU time")
    field(EGU,  "ms")
    field(PREC, "0")
    field(HIGH, "110")
    field(LOW,  "-100")
    field(HSV,  "1")
    field(LSV,  "1")
    field(INP,  "@asyn($(MOTOR_PORT),0)PTPdiffTimeIOC_MCU")
    field(SCAN, "1 second")
}

#
# Difference between PTP and NT time inside the MCU
# Note: NT time is "outside" the TwinCAT subsystem
#
record(ai, "$(P)$(R)PTPdiffNTtime_MCU")
{
    field(DTYP, "asynFloat64")
    field(DESC, "Diff between PTP and NTP in the MCU")
    field(EGU,  "ms")
    field(PREC, "1")
    field(HIGH, "20")
    field(LOW,  "-20")
    field(HSV,  "1")
    field(LSV,  "1")
    field(INP,  "@asyn($(MOTOR_PORT),0)PTPdiffXYtime_MCU")
    field(SCAN, "1 second")
}

# Difference between PTP and TC time inside the MCU
record(ai, "$(P)$(R)PTPdiffTCtime_MCU")
{
    field(DTYP, "asynFloat64")
    field(DESC, "Diff between PTP and TC in the MCU")
    field(EGU,  "ms")
    field(PREC, "4")
    field(HIGH, "20")
    field(LOW,  "-20")
    field(HSV,  "1")
    field(LSV,  "1")
    field(INP,  "@asyn($(MOTOR_PORT),1)PTPdiffXYtime_MCU")
    field(SCAN, "1 second")
}

# Difference between PTP and TC NTP EXT inside the MCU/TwinCAT runtime
record(ai, "$(P)$(R)PTPdiffTcNTPExttime_MCU")
{
    field(DTYP, "asynFloat64")
    field(DESC, "Diff between PTP and NTP EXT in the MCU")
    field(EGU,  "ms")
    field(PREC, "6")
    field(HIGH, "20")
    field(LOW,  "-20")
    field(HSV,  "1")
    field(LSV,  "1")
    field(INP,  "@asyn($(MOTOR_PORT),2)PTPdiffXYtime_MCU")
    field(SCAN, "1 second")
}

# Calculate the severity
# When the severity from all input links gets 0,
# start a countdown
record(transform, "$(P)$(R)PTPAlarmSevrCalc") {
  field(DESC, "Alarm Severity of PTP")
  field(SCAN, "1 second")
  field(COPT, "Always")
  # Counter before allGood gets true
  field(INPA, "11")
  field(INPB, "$(P)$(R)PTPState.SEVR              CP MS")
  field(INPC, "$(P)$(R)PTPOffset.SEVR             CP MS")
  field(INPD, "$(P)$(R)PTPErrorStatus.SEVR        CP MS")
  field(INPE, "$(P)$(R)PTPdiffTimeIOC_MCU.SEVR    CP MS")
  field(CLCN, "b || c || d || e")
  # O is LED visible
  field(CLCO, "N ? A : (O > 0 ? O - 1 : O)")
  # P is all good
  field(CLCP, "O > 0 ? 0 : 1")
  field(FLNK, "$(P)$(R)PTPallGood")

}

record(bo,  "$(P)$(R)PTPallGood") {
  field(DESC, "PTP is all good")
  field(DTYP, "asynInt32")
  field(DOL,  "$(P)$(R)PTPAlarmSevrCalc.P CP MS")
  field(OMSL, "closed_loop")
  field(OUT,  "@asyn($(MOTOR_PORT),0)PTPallGood")
  field(ZNAM, "No")
  field(ONAM, "Yes")
  field(ZSV,  "1")
}


record(longin, "$(P)$(R)PTPErrorStatus-StatusBits")
{
    field(DTYP, "asynInt32")
    field(DESC, "PTPErrorStatus")
    field(EGU,  "ErrorStatusBits")
    field(INP,  "@asyn($(MOTOR_PORT),0)PTPErrorStatus")
    field(SCAN, "I/O Intr")
}

record(stringin, "$(P)$(R)PTPErrNamBit0") {
    field(DTYP, "asynOctetRead")
    field(INP,  "@asyn($(MOTOR_PORT),0)PTPErrorStatus_NamBit0")
    field(SCAN, "I/O Intr")
}
record(stringin, "$(P)$(R)PTPErrNamBit1") {
    field(DTYP, "asynOctetRead")
    field(INP,  "@asyn($(MOTOR_PORT),0)PTPErrorStatus_NamBit1")
    field(SCAN, "I/O Intr")
}
record(stringin, "$(P)$(R)PTPErrNamBit2") {
    field(DTYP, "asynOctetRead")
    field(INP,  "@asyn($(MOTOR_PORT),0)PTPErrorStatus_NamBit2")
    field(SCAN, "I/O Intr")
}
record(stringin, "$(P)$(R)PTPErrNamBit3") {
    field(DTYP, "asynOctetRead")
    field(INP,  "@asyn($(MOTOR_PORT),0)PTPErrorStatus_NamBit3")
    field(SCAN, "I/O Intr")
}
record(stringin, "$(P)$(R)PTPErrNamBit4") {
    field(DTYP, "asynOctetRead")
    field(INP,  "@asyn($(MOTOR_PORT),0)PTPErrorStatus_NamBit4")
    field(SCAN, "I/O Intr")
}
record(stringin, "$(P)$(R)PTPErrNamBit5") {
    field(DTYP, "asynOctetRead")
    field(INP,  "@asyn($(MOTOR_PORT),0)PTPErrorStatus_NamBit5")
    field(SCAN, "I/O Intr")
}
record(stringin, "$(P)$(R)PTPErrNamBit6") {
    field(DTYP, "asynOctetRead")
    field(INP,  "@asyn($(MOTOR_PORT),0)PTPErrorStatus_NamBit6")
    field(SCAN, "I/O Intr")
}
record(stringin, "$(P)$(R)PTPErrNamBit7") {
    field(DTYP, "asynOctetRead")
    field(INP,  "@asyn($(MOTOR_PORT),0)PTPErrorStatus_NamBit7")
    field(SCAN, "I/O Intr")
}
record(stringin, "$(P)$(R)PTPErrNamBit8") {
    field(DTYP, "asynOctetRead")
    field(INP,  "@asyn($(MOTOR_PORT),0)PTPErrorStatus_NamBit8")
    field(SCAN, "I/O Intr")
}
record(stringin, "$(P)$(R)PTPErrNamBit9") {
    field(DTYP, "asynOctetRead")
    field(INP,  "@asyn($(MOTOR_PORT),0)PTPErrorStatus_NamBit9")
    field(SCAN, "I/O Intr")
}
record(stringin, "$(P)$(R)PTPErrNamBit10") {
    field(DTYP, "asynOctetRead")
    field(INP,  "@asyn($(MOTOR_PORT),0)PTPErrorStatus_NamBit10")
    field(SCAN, "I/O Intr")
}
record(stringin, "$(P)$(R)PTPErrNamBit10") {
    field(DTYP, "asynOctetRead")
    field(INP,  "@asyn($(MOTOR_PORT),0)PTPErrorStatus_NamBit10")
    field(SCAN, "I/O Intr")
}
record(stringin, "$(P)$(R)PTPErrNamBit11") {
    field(DTYP, "asynOctetRead")
    field(INP,  "@asyn($(MOTOR_PORT),0)PTPErrorStatus_NamBit11")
    field(SCAN, "I/O Intr")
}
record(stringin, "$(P)$(R)PTPErrNamBit12") {
    field(DTYP, "asynOctetRead")
    field(INP,  "@asyn($(MOTOR_PORT),0)PTPErrorStatus_NamBit12")
    field(SCAN, "I/O Intr")
}
record(stringin, "$(P)$(R)PTPErrNamBit13") {
    field(DTYP, "asynOctetRead")
    field(INP,  "@asyn($(MOTOR_PORT),0)PTPErrorStatus_NamBit13")
    field(SCAN, "I/O Intr")
}
record(stringin, "$(P)$(R)PTPErrNamBit14") {
    field(DTYP, "asynOctetRead")
    field(INP,  "@asyn($(MOTOR_PORT),0)PTPErrorStatus_NamBit14")
    field(SCAN, "I/O Intr")
}
record(stringin, "$(P)$(R)PTPErrNamBit15") {
    field(DTYP, "asynOctetRead")
    field(INP,  "@asyn($(MOTOR_PORT),0)PTPErrorStatus_NamBit15")
    field(SCAN, "I/O Intr")
}
record(stringin, "$(P)$(R)PTPErrNamBit16") {
    field(DTYP, "asynOctetRead")
    field(INP,  "@asyn($(MOTOR_PORT),0)PTPErrorStatus_NamBit16")
    field(SCAN, "I/O Intr")
}
record(stringin, "$(P)$(R)PTPErrNamBit17") {
    field(DTYP, "asynOctetRead")
    field(INP,  "@asyn($(MOTOR_PORT),0)PTPErrorStatus_NamBit17")
    field(SCAN, "I/O Intr")
}
record(stringin, "$(P)$(R)PTPErrNamBit18") {
    field(DTYP, "asynOctetRead")
    field(INP,  "@asyn($(MOTOR_PORT),0)PTPErrorStatus_NamBit18")
    field(SCAN, "I/O Intr")
}
record(stringin, "$(P)$(R)PTPErrNamBit19") {
    field(DTYP, "asynOctetRead")
    field(INP,  "@asyn($(MOTOR_PORT),0)PTPErrorStatus_NamBit19")
    field(SCAN, "I/O Intr")
}
record(stringin, "$(P)$(R)PTPErrNamBit20") {
    field(DTYP, "asynOctetRead")
    field(INP,  "@asyn($(MOTOR_PORT),0)PTPErrorStatus_NamBit20")
    field(SCAN, "I/O Intr")
}
record(stringin, "$(P)$(R)PTPErrNamBit21") {
    field(DTYP, "asynOctetRead")
    field(INP,  "@asyn($(MOTOR_PORT),0)PTPErrorStatus_NamBit21")
    field(SCAN, "I/O Intr")
}
record(stringin, "$(P)$(R)PTPErrNamBit22") {
    field(DTYP, "asynOctetRead")
    field(INP,  "@asyn($(MOTOR_PORT),0)PTPErrorStatus_NamBit22")
    field(SCAN, "I/O Intr")
}
record(stringin, "$(P)$(R)PTPErrNamBit23") {
    field(DTYP, "asynOctetRead")
    field(INP,  "@asyn($(MOTOR_PORT),0)PTPErrorStatus_NamBit23")
    field(SCAN, "I/O Intr")
}
