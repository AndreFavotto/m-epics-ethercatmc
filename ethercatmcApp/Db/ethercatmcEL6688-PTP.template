record(mbbi,  "$(SYSPFX)$(REG_NAME)PTPState") {
    field(DESC, "PTP state EtherCAT bus")
    field(DTYP, "asynInt32")
    field(INP,  "@asyn($(MOTOR_PORT),0)PTPState")
    field(SCAN, "1 second")
    field(ZRVL, "0")
    field(ONVL, "1")
    field(TWVL, "2")
    field(THVL, "3")
    field(FRVL, "4")
    field(FVVL, "5")
    field(SXVL, "6")
    field(SVVL, "7")
    field(EIVL, "8")
    field(NIVL, "9")
    field(FFVL, "4294967294")

    field(ZRST, "PTP:NO_OPERATION")
    field(ONST, "PTP:INITIALIZING")
    field(TWST, "PTP:FAULTY")
    field(THST, "PTP:DISABLED")
    field(FRST, "PTP:LISTENING")
    field(FVST, "PTP:PRE_MASTER")
    field(SXST, "PTP:MASTER")
    field(SVST, "PTP:PASSIVE")
    field(EIST, "PTP:UNCALIBRATED")
    field(NIST, "PTP:SLAVE")

    field(FFST, "PTP:NO_CABLE")

    field(ZRSV, "2")
    field(ONSV, "1")
    field(TWSV, "2")
    field(THSV, "2")
    field(FRSV, "1")
    field(FVSV, "1")
    field(SXSV, "2")
    field(SVSV, "2")
    field(EISV, "2")
    field(NISV, "0")
    field(FFSV, "2")
}

record(longin, "$(SYSPFX)$(REG_NAME)PTPOffset")
{
    field(DTYP, "asynInt32")
    field(DESC, "PTPOffset")
    field(EGU,  "ns")
    field(INP,  "@asyn($(MOTOR_PORT),0)PTPOffset")
    field(SCAN, "1 second")
}

record(longin, "$(SYSPFX)$(REG_NAME)PTPSyncSeqNum")
{
    field(DTYP, "asynInt32")
    field(DESC, "PTPSyncSeqNum")
    field(EGU,  "num")
    field(INP,  "@asyn($(MOTOR_PORT),0)PTPSyncSeqNum")
    field(SCAN, "1 second")
}

record(int64in, "$(SYSPFX)$(REG_NAME)DcToExtTimeOffset")
{
    field(DTYP, "asynInt64")
    field(DESC, "DcToExtTimeOffsetSystem")
    field(EGU,  "ns")
    field(INP,  "@asyn($(MOTOR_PORT),0)DcToExtTimeOffset")
    field(SCAN, "1 second")
}

record(int64in, "$(SYSPFX)$(REG_NAME)SystemUTCtime")
{
    field(DTYP, "asynInt64")
    field(DESC, "SystemUTCtime")
    field(EGU,  "ns")
    field(INP,  "@asyn($(MOTOR_PORT),0)SystemUTCtime")
    field(SCAN, "1 second")
}

record(int64in, "$(SYSPFX)$(REG_NAME)SystemUTCtime-TSE")
{
    field(DTYP, "asynInt64")
    field(DESC, "SystemUTCtime")
    field(EGU,  "ns")
    field(INP,  "@asyn($(MOTOR_PORT),0)SystemUTCtime")
    field(SCAN, "I/O Intr")
    field(TSE, -2)
}

record(longin, "$(SYSPFX)$(REG_NAME)PTPErrorStatus")
{
    field(DTYP, "asynInt32")
    field(DESC, "PTPErrorStatus")
    field(EGU,  "ErrorStatusBits")
    field(HIGH, "1")
    field(LOW, "-1")
    field(HSV,  "1")
    field(LSV,  "1")
    field(INP,  "@asyn($(MOTOR_PORT),0)PTPErrorStatus")
    field(SCAN, "I/O Intr")
}

#
# Diff between NTP (IOC) and PTP (MCU/PLC)
# Typically the MCU has an EL6688 with PTP
# Since the PLC cycle time is 10msec,
# we allow 10msec larger values for HIGH/HIHI
record(ai, "$(SYSPFX)$(REG_NAME)PTPdiffTimeIOC_MCU")
{
    field(DTYP, "asynFloat64")
    field(DESC, "Diff between IOC time and MCU time")
    field(EGU,  "ms")
    field(PREC, "0")
    field(HIGH, "110")
    field(LOW,  "-100")
    field(HSV,  "1")
    field(LSV,  "1")
    field(INP,  "@asyn($(MOTOR_PORT),0)PTPdiffTimeIOC_MCU")
    field(SCAN, "1 second")
}

#
# Difference between PTP and NT time inside the MCU
# Note: NT time is "outside" the TwinCAT subsystem
#
record(ai, "$(SYSPFX)$(REG_NAME)PTPdiffNTtime_MCU")
{
    field(DTYP, "asynFloat64")
    field(DESC, "Diff between PTP and NTP in the MCU")
    field(EGU,  "ms")
    field(PREC, "1")
    field(HIGH, "20")
    field(LOW,  "-20")
    field(HSV,  "1")
    field(LSV,  "1")
    field(INP,  "@asyn($(MOTOR_PORT),0)PTPdiffXYtime_MCU")
    field(SCAN, "1 second")
}

# Difference between PTP and TC time inside the MCU
record(ai, "$(SYSPFX)$(REG_NAME)PTPdiffTCtime_MCU")
{
    field(DTYP, "asynFloat64")
    field(DESC, "Diff between PTP and TC in the MCU")
    field(EGU,  "ms")
    field(PREC, "4")
    field(HIGH, "20")
    field(LOW,  "-20")
    field(HSV,  "1")
    field(LSV,  "1")
    field(INP,  "@asyn($(MOTOR_PORT),1)PTPdiffXYtime_MCU")
    field(SCAN, "1 second")
}

# Difference between PTP and TC NTP EXT inside the MCU/TwinCAT runtime
record(ai, "$(SYSPFX)$(REG_NAME)PTPdiffTcNTPExttime_MCU")
{
    field(DTYP, "asynFloat64")
    field(DESC, "Diff between PTP and NTP EXT in the MCU")
    field(EGU,  "ms")
    field(PREC, "6")
    field(HIGH, "20")
    field(LOW,  "-20")
    field(HSV,  "1")
    field(LSV,  "1")
    field(INP,  "@asyn($(MOTOR_PORT),2)PTPdiffXYtime_MCU")
    field(SCAN, "1 second")
}

# Calculate the severity
# When the severity from all input links gets 0,
# start a countdown
record(transform, "$(SYSPFX)$(REG_NAME)PTPAlarmSevrCalc") {
  field(DESC, "Alarm Severity of PTP")
  field(SCAN, "1 second")
  field(COPT, "Always")
  # Counter before allGood gets true
  field(INPA, "11")
  field(INPB, "$(SYSPFX)$(REG_NAME)PTPState.SEVR              CP MS")
  field(INPC, "$(SYSPFX)$(REG_NAME)PTPOffset.SEVR             CP MS")
  field(INPD, "$(SYSPFX)$(REG_NAME)PTPErrorStatus.SEVR        CP MS")
  field(INPE, "$(SYSPFX)$(REG_NAME)PTPdiffTimeIOC_MCU.SEVR    CP MS")
  field(CLCN, "b || c || d || e")
  # O is LED visible
  field(CLCO, "N ? A : (O > 0 ? O - 1 : O)")
  # P is all good
  field(CLCP, "O > 0 ? 0 : 1")
  field(FLNK, "$(SYSPFX)$(REG_NAME)PTPallGood")

}

record(bo,  "$(SYSPFX)$(REG_NAME)PTPallGood") {
  field(DESC, "PTP is all good")
  field(DTYP, "asynInt32")
  field(DOL,  "$(SYSPFX)$(REG_NAME)PTPAlarmSevrCalc.P CP MS")
  field(OMSL, "closed_loop")
  field(OUT,  "@asyn($(MOTOR_PORT),0)PTPallGood")
  field(ZNAM, "No")
  field(ONAM, "Yes")
  field(ZSV,  "1")
}


record(longin, "$(SYSPFX)$(REG_NAME)PTPErrorStatus-StatusBits")
{
    field(DTYP, "asynInt32")
    field(DESC, "PTPErrorStatus")
    field(EGU,  "ErrorStatusBits")
    field(INP,  "@asyn($(MOTOR_PORT),0)PTPErrorStatus")
    field(SCAN, "I/O Intr")
}

record(stringin, "$(SYSPFX)$(REG_NAME)PTPErrBitNam0") {
    field(DTYP, "asynOctetRead")
    field(INP,  "@asyn($(MOTOR_PORT),0)PTPErrorStatus_NamAuxBit0")
    field(SCAN, "I/O Intr")
}
record(stringin, "$(SYSPFX)$(REG_NAME)PTPErrBitNam1") {
    field(DTYP, "asynOctetRead")
    field(INP,  "@asyn($(MOTOR_PORT),0)PTPErrorStatus_NamAuxBit1")
    field(SCAN, "I/O Intr")
}
record(stringin, "$(SYSPFX)$(REG_NAME)PTPErrBitNam2") {
    field(DTYP, "asynOctetRead")
    field(INP,  "@asyn($(MOTOR_PORT),0)PTPErrorStatus_NamAuxBit2")
    field(SCAN, "I/O Intr")
}
record(stringin, "$(SYSPFX)$(REG_NAME)PTPErrBitNam3") {
    field(DTYP, "asynOctetRead")
    field(INP,  "@asyn($(MOTOR_PORT),0)PTPErrorStatus_NamAuxBit3")
    field(SCAN, "I/O Intr")
}
record(stringin, "$(SYSPFX)$(REG_NAME)PTPErrBitNam4") {
    field(DTYP, "asynOctetRead")
    field(INP,  "@asyn($(MOTOR_PORT),0)PTPErrorStatus_NamAuxBit4")
    field(SCAN, "I/O Intr")
}
record(stringin, "$(SYSPFX)$(REG_NAME)PTPErrBitNam5") {
    field(DTYP, "asynOctetRead")
    field(INP,  "@asyn($(MOTOR_PORT),0)PTPErrorStatus_NamAuxBit5")
    field(SCAN, "I/O Intr")
}
record(stringin, "$(SYSPFX)$(REG_NAME)PTPErrBitNam6") {
    field(DTYP, "asynOctetRead")
    field(INP,  "@asyn($(MOTOR_PORT),0)PTPErrorStatus_NamAuxBit6")
    field(SCAN, "I/O Intr")
}
record(stringin, "$(SYSPFX)$(REG_NAME)PTPErrBitNam7") {
    field(DTYP, "asynOctetRead")
    field(INP,  "@asyn($(MOTOR_PORT),0)PTPErrorStatus_NamAuxBit7")
    field(SCAN, "I/O Intr")
}
record(stringin, "$(SYSPFX)$(REG_NAME)PTPErrBitNam8") {
    field(DTYP, "asynOctetRead")
    field(INP,  "@asyn($(MOTOR_PORT),0)PTPErrorStatus_NamAuxBit8")
    field(SCAN, "I/O Intr")
}
record(stringin, "$(SYSPFX)$(REG_NAME)PTPErrBitNam9") {
    field(DTYP, "asynOctetRead")
    field(INP,  "@asyn($(MOTOR_PORT),0)PTPErrorStatus_NamAuxBit9")
    field(SCAN, "I/O Intr")
}
record(stringin, "$(SYSPFX)$(REG_NAME)PTPErrBitNam10") {
    field(DTYP, "asynOctetRead")
    field(INP,  "@asyn($(MOTOR_PORT),0)PTPErrorStatus_NamAuxBit10")
    field(SCAN, "I/O Intr")
}
record(stringin, "$(SYSPFX)$(REG_NAME)PTPErrBitNam10") {
    field(DTYP, "asynOctetRead")
    field(INP,  "@asyn($(MOTOR_PORT),0)PTPErrorStatus_NamAuxBit10")
    field(SCAN, "I/O Intr")
}
record(stringin, "$(SYSPFX)$(REG_NAME)PTPErrBitNam11") {
    field(DTYP, "asynOctetRead")
    field(INP,  "@asyn($(MOTOR_PORT),0)PTPErrorStatus_NamAuxBit11")
    field(SCAN, "I/O Intr")
}
record(stringin, "$(SYSPFX)$(REG_NAME)PTPErrBitNam12") {
    field(DTYP, "asynOctetRead")
    field(INP,  "@asyn($(MOTOR_PORT),0)PTPErrorStatus_NamAuxBit12")
    field(SCAN, "I/O Intr")
}
record(stringin, "$(SYSPFX)$(REG_NAME)PTPErrBitNam13") {
    field(DTYP, "asynOctetRead")
    field(INP,  "@asyn($(MOTOR_PORT),0)PTPErrorStatus_NamAuxBit13")
    field(SCAN, "I/O Intr")
}
record(stringin, "$(SYSPFX)$(REG_NAME)PTPErrBitNam14") {
    field(DTYP, "asynOctetRead")
    field(INP,  "@asyn($(MOTOR_PORT),0)PTPErrorStatus_NamAuxBit14")
    field(SCAN, "I/O Intr")
}
record(stringin, "$(SYSPFX)$(REG_NAME)PTPErrBitNam15") {
    field(DTYP, "asynOctetRead")
    field(INP,  "@asyn($(MOTOR_PORT),0)PTPErrorStatus_NamAuxBit15")
    field(SCAN, "I/O Intr")
}
record(stringin, "$(SYSPFX)$(REG_NAME)PTPErrBitNam16") {
    field(DTYP, "asynOctetRead")
    field(INP,  "@asyn($(MOTOR_PORT),0)PTPErrorStatus_NamAuxBit16")
    field(SCAN, "I/O Intr")
}
record(stringin, "$(SYSPFX)$(REG_NAME)PTPErrBitNam17") {
    field(DTYP, "asynOctetRead")
    field(INP,  "@asyn($(MOTOR_PORT),0)PTPErrorStatus_NamAuxBit17")
    field(SCAN, "I/O Intr")
}
record(stringin, "$(SYSPFX)$(REG_NAME)PTPErrBitNam18") {
    field(DTYP, "asynOctetRead")
    field(INP,  "@asyn($(MOTOR_PORT),0)PTPErrorStatus_NamAuxBit18")
    field(SCAN, "I/O Intr")
}
record(stringin, "$(SYSPFX)$(REG_NAME)PTPErrBitNam19") {
    field(DTYP, "asynOctetRead")
    field(INP,  "@asyn($(MOTOR_PORT),0)PTPErrorStatus_NamAuxBit19")
    field(SCAN, "I/O Intr")
}
record(stringin, "$(SYSPFX)$(REG_NAME)PTPErrBitNam20") {
    field(DTYP, "asynOctetRead")
    field(INP,  "@asyn($(MOTOR_PORT),0)PTPErrorStatus_NamAuxBit20")
    field(SCAN, "I/O Intr")
}
record(stringin, "$(SYSPFX)$(REG_NAME)PTPErrBitNam21") {
    field(DTYP, "asynOctetRead")
    field(INP,  "@asyn($(MOTOR_PORT),0)PTPErrorStatus_NamAuxBit21")
    field(SCAN, "I/O Intr")
}
record(stringin, "$(SYSPFX)$(REG_NAME)PTPErrBitNam22") {
    field(DTYP, "asynOctetRead")
    field(INP,  "@asyn($(MOTOR_PORT),0)PTPErrorStatus_NamAuxBit22")
    field(SCAN, "I/O Intr")
}
record(stringin, "$(SYSPFX)$(REG_NAME)PTPErrBitNam23") {
    field(DTYP, "asynOctetRead")
    field(INP,  "@asyn($(MOTOR_PORT),0)PTPErrorStatus_NamAuxBit23")
    field(SCAN, "I/O Intr")
}
